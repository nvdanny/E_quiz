{"version":3,"file":"static/js/494.451fc072.chunk.js","mappings":"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","sources":["views/pages/LandingPage.js","../node_modules/@coreui/react/src/components/button/CButton.tsx","../node_modules/@coreui/react/src/components/link/CLink.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { CButton } from '@coreui/react';\r\n\r\nconst LandingPage = () => {\r\n  const isLogin = localStorage.getItem(\"accessToken\")\r\n  return (\r\n    <div>\r\n        <Link to=\"/admin/dashboard\">\r\n          <CButton color=\"link\" active tabIndex={-1}>\r\n              Sang trang Admin\r\n          </CButton>\r\n        </Link>\r\n       {!isLogin && \r\n        <>\r\n          <Link to=\"/login\">\r\n            <CButton color=\"link\" active tabIndex={-1}>\r\n                Đăng nhập\r\n            </CButton>\r\n          </Link>\r\n          <Link to=\"/register\">\r\n            <CButton color=\"link\" active tabIndex={-1}>\r\n                Đăng ký\r\n            </CButton>\r\n          </Link> \r\n          <Link to=\"/exam\">\r\n            <CButton color=\"link\" active tabIndex={-1}>\r\n                Làm bài thi\r\n            </CButton>\r\n          </Link>\r\n        </>\r\n        }       \r\n        {isLogin && <Link to=\"/logout\">\r\n          <CButton color=\"link\" active tabIndex={-1}>\r\n              Đăng xuất\r\n          </CButton>\r\n        </Link>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { ElementType, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink, CLinkProps } from '../link/CLink'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors, Shapes } from '../../types'\n\nexport interface CButtonProps extends Omit<CLinkProps, 'size'> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n  /**\n   * The role attribute describes the role of an element in programs that can make use of it, such as screen readers or magnifiers.\n   */\n  role?: string\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of button. Always specify the type attribute for the `<button>` element.\n   * Different browsers may use different default types for the `<button>` element.\n   */\n  type?: 'button' | 'submit' | 'reset'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport const CButton: PolymorphicRefForwardingComponent<'button', CButtonProps> = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  CButtonProps\n>(\n  (\n    { children, as = 'button', className, color, shape, size, type = 'button', variant, ...rest },\n    ref,\n  ) => {\n    return (\n      <CLink\n        as={rest.href ? 'a' : as}\n        {...(!rest.href && { type: type })}\n        className={classNames(\n          'btn',\n          variant ? `btn-${variant}-${color}` : `btn-${color}`,\n          { [`btn-${size}`]: size },\n          shape,\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </CLink>\n    )\n  },\n)\n\nCButton.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  shape: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n  variant: PropTypes.oneOf(['outline', 'ghost']),\n}\n\nCButton.displayName = 'CButton'\n","import React, { AllHTMLAttributes, ElementType, forwardRef, MouseEvent } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CLinkProps\n  extends Omit<AllHTMLAttributes<HTMLButtonElement | HTMLAnchorElement>, 'as'> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CLink: PolymorphicRefForwardingComponent<'a', CLinkProps> = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  CLinkProps\n>(({ children, active, as: Component = 'a', className, disabled, ...rest }, ref) => {\n  return (\n    <Component\n      // TODO: remove duplicated classes ex. `active active` in `<CListGroupItem>`\n      className={classNames(className, { active, disabled })}\n      {...(active && { 'aria-current': 'page' })}\n      {...(Component === 'a' && disabled && { 'aria-disabled': true, tabIndex: -1 })}\n      {...((Component === 'a' || Component === 'button') && {\n        onClick: (event: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => {\n          event.preventDefault\n          !disabled && rest.onClick && rest.onClick(event)\n        },\n      })}\n      disabled={disabled}\n      {...rest}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCLink.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n}\n\nCLink.displayName = 'CLink'\n"],"names":["LandingPage","isLogin","localStorage","getItem","_jsxs","children","_jsx","Link","to","CButton","color","active","tabIndex","_Fragment","forwardRef","_a","ref","_c","as","className","shape","size","_d","type","variant","rest","__rest","React","CLink","__assign","href","classNames","concat","_b","propTypes","PropTypes","colorPropType","displayName","Component","disabled","onClick","event","preventDefault"],"sourceRoot":""}