{"version":3,"file":"static/js/198.109d8f16.chunk.js","mappings":"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","sources":["api/QuestionApi.js","views/admin/AddQuestion.js"],"sourcesContent":["import  apiClient  from './ApiClient';\r\n\r\nexport const createQuestion = (data, file, token) => {\r\n    const payload = {\r\n        description: data.description,\r\n        imageUrl: data.imageUrl,\r\n        options: data.options,\r\n        answer: data.answer,\r\n    };\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n    };\r\n    return apiClient.post(`/api/question/`, payload, { headers });\r\n};\r\n\r\n\r\nexport const deleteQuestion = (questionId, token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n    };\r\n    return apiClient.delete(`/api/question/${questionId}`, { headers });\r\n};\r\n\r\nexport const listQuestion = (token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n    };\r\n    return apiClient.get(`/api/question/list`, { headers });\r\n};\r\n\r\nexport const updateQuestion = async (data, questionId, token) => {\r\n    const payload = {\r\n        id : questionId,\r\n        description: data.description,\r\n        imageUrl: data.imageUrl, // or `file.path` if you're handling file uploads separately\r\n        options: data.options,\r\n        answer: data.answer,\r\n    };\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n    };\r\n    return apiClient.put(`/api/question/${questionId}`, payload, { headers });\r\n};\r\n\r\n\r\nexport const getQuestionById = async (questionId, token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n    };\r\n    return apiClient.get(`/api/question/${questionId}`, { headers });\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'; // Import useParams to get path variables\r\nimport axios from 'axios';\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CForm,\r\n  CFormInput,\r\n  CFormCheck,\r\n  CRow,\r\n  CCol,\r\n  CFormTextarea,\r\n  CAlert\r\n} from '@coreui/react';\r\nimport { createQuestion, getQuestionById ,updateQuestion} from '../../api/QuestionApi'; // Import your API functions\r\nimport { Button, Popover, OverlayTrigger } from 'react-bootstrap';\r\n\r\nconst CLOUDINARY_URL = process.env.REACT_APP_CLOUDINARY_URL;\r\nconst CLOUDINARY_UPLOAD_PRESET = process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET;\r\n\r\nconst AddQuestion = () => {\r\n  const { questionId } = useParams();\r\n  \r\n  const [text, setText] = useState('');\r\n  const [options, setOptions] = useState([\r\n    { text: '', isCorrect: false },\r\n    { text: '', isCorrect: false },\r\n    { text: '', isCorrect: false },\r\n    { text: '', isCorrect: false },\r\n  ]);\r\n  const [image, setImage] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('accessToken'));\r\n  const [showAlert, setShowAlert] = useState(false); \r\n  const [alertMessage, setAlertMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (questionId) {\r\n      fetchQuestionData(questionId);\r\n    }\r\n  }, [questionId]);\r\n\r\n  useEffect(() => {\r\n    if (showAlert) {\r\n      const timer = setTimeout(() => {\r\n        setShowAlert(false);\r\n      }, 5000);\r\n\r\n      return () => clearTimeout(timer); \r\n    }\r\n  }, [showAlert]);\r\n  const fetchQuestionData = async (id) => {\r\n    try {\r\n      const response = await getQuestionById(id, token);\r\n      const question = response.data.msg.question;\r\n      setText(question.description);\r\n      setImage(question.imageUrl || null);\r\n\r\n      const updatedOptions = (question.options || [\r\n        { text: '', isCorrect: false },\r\n        { text: '', isCorrect: false },\r\n        { text: '', isCorrect: false },\r\n        { text: '', isCorrect: false },\r\n      ]).map((option, index) => ({\r\n        ...option,\r\n        isCorrect: option._id === question.answer._id\r\n      }));\r\n  \r\n      setOptions(updatedOptions);\r\n    } catch (err) {\r\n      setAlertMessage('Lỗi khi tải thông tin câu hỏi');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleAddOption = () => {\r\n    setOptions([...options, { text: '', isCorrect: false }]);\r\n  };\r\n\r\n  const handleOptionChange = (index, event) => {\r\n    const newOptions = options.map((option, idx) =>\r\n      idx === index ? { ...option, [event.target.name]: event.target.name === 'isCorrect' ? event.target.checked : event.target.value } : option\r\n    );\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  const validateForm = () => {\r\n    if (!text.trim()) {\r\n      setAlertMessage('Đề bài không được để trống.');\r\n      return false;\r\n    }\r\n    if (options.some(option => !option.text.trim())) {\r\n      setAlertMessage('Tất cả các lựa chọn phải có nội dung.');\r\n      return false;\r\n    }\r\n    if (!options.some(option => option.isCorrect)) {\r\n      setAlertMessage('Phải chọn ít nhất một đáp án đúng.');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleDeleteOption = (index) => {\r\n    setOptions(options.filter((_, idx) => idx !== index));\r\n  };\r\n\r\n  const handleImageChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\r\n      \r\n      try {\r\n        const response = await axios.post(CLOUDINARY_URL, formData);\r\n        setImage(response.data.secure_url);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!validateForm()) {\r\n      setShowAlert(true);\r\n      return;\r\n    }\r\n    \r\n    // Chuyển đổi các tùy chọn thành định dạng mong muốn\r\n    const formattedOptions = options.map(option => ({\r\n      text: option.text,\r\n      isCorrect: option.isCorrect\r\n    }));\r\n    const correctOptionIndex = options.findIndex(option => option.isCorrect);\r\n  \r\n    const data = {\r\n      description: text,\r\n      imageUrl: image,\r\n      options: formattedOptions,\r\n      answer: correctOptionIndex\r\n    };\r\n  \r\n    try {\r\n      let response;\r\n      if (questionId) {\r\n        response = await updateQuestion(data, questionId,token);\r\n      } else {\r\n        response = await createQuestion(data, image, token);\r\n      }\r\n  \r\n      if (response.status === 200) {\r\n        setAlertMessage(questionId ? 'Cập nhật câu hỏi thành công!' : 'Thêm câu hỏi mới thành công!');\r\n        setShowAlert(true);\r\n      } else {\r\n        setAlertMessage('Đầu vào không hợp lệ');\r\n        setShowAlert(true);\r\n      }\r\n  \r\n      if(!questionId){\r\n        setText('');\r\n        setOptions([\r\n          { text: '', isCorrect: false },\r\n          { text: '', isCorrect: false },\r\n          { text: '', isCorrect: false },\r\n          { text: '', isCorrect: false },\r\n        ]);\r\n        setImage(null);\r\n        }\r\n    } catch (err) {\r\n      console.error(err);\r\n      setAlertMessage('Lỗi khi lưu câu hỏi');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n  \r\n  const handlePasteInput = () => {\r\n    const pastedText = prompt('Hãy dán nội dung câu hỏi:');\r\n    if (pastedText) {\r\n      const regex = /^(.*?)(?=(?:\\s*[A-D]\\.\\s*))/s;\r\n      const match = pastedText.match(regex);\r\n  \r\n      if (match) {\r\n        const questionText = match[1].trim();\r\n        const answersText = pastedText.slice(match[0].length).trim();\r\n  \r\n        const answerRegex = /\\s*[A-D]\\.\\s*([^A-D]*)/g;\r\n        const parsedOptions = [];\r\n        let answerMatch;\r\n  \r\n        while ((answerMatch = answerRegex.exec(answersText)) !== null) {\r\n          parsedOptions.push({\r\n            text: answerMatch[1].trim(),\r\n            isCorrect: false\r\n          });\r\n        }\r\n  \r\n        setText(questionText);\r\n        setOptions(parsedOptions);\r\n      } else {\r\n        setAlertMessage('Nội dung dán vào không đúng định dạng.');\r\n        setShowAlert(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const popover = (\r\n    <Popover id=\"popover-basic\">\r\n      <Popover.Header as=\"h3\">Hướng dẫn định dạng</Popover.Header>\r\n      <Popover.Body>\r\n        <p>Để paste câu hỏi, bạn cần định dạng như sau:</p>\r\n        <p>\r\n          Câu hỏi hoặc mô tả <br />\r\n          A. Đáp án 1 <br />\r\n          B. Đáp án 2 <br />\r\n          C. Đáp án 3 <br />\r\n          D. Đáp án 4\r\n        </p>\r\n        <p>Hoặc:</p>\r\n        <p>\r\n          Câu hỏi hoặc mô tả <br />\r\n          A. Đáp án 1 B. Đáp án 2 C. Đáp án 3 D. Đáp án 4\r\n        </p>\r\n      </Popover.Body>\r\n    </Popover>\r\n  );\r\n  \r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        {questionId ? 'Chỉnh sửa câu hỏi' : 'Thêm câu hỏi'}\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CForm onSubmit={handleSubmit}>\r\n          {showAlert && (\r\n            <CAlert color={alertMessage.startsWith('Failed') || alertMessage.startsWith('An error') ? 'danger' : 'success'}>\r\n              {alertMessage}\r\n            </CAlert>\r\n          )}\r\n          <CRow className=\"mb-3\">\r\n            <CCol sm=\"2\">\r\n              <label htmlFor=\"question-text\">Đề bài:</label>\r\n            </CCol>\r\n            <CCol sm=\"6\">\r\n              <CFormTextarea\r\n                id=\"question-text\"\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n                rows={4}\r\n              />\r\n              {/* {image && (\r\n                <div className=\"mt-3\">\r\n                  <img src={image} alt=\"\" style={{ maxWidth: '100%', height: 'auto' }} />\r\n                </div>\r\n              )} */}\r\n            </CCol>\r\n            <CCol sm=\"2\">\r\n              {/* <CFormInput\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                placeholder='Thêm ảnh'\r\n                onChange={handleImageChange}\r\n              /> */}\r\n              <CButton color=\"primary\" onClick={handlePasteInput}>\r\n                Import nhanh\r\n              </CButton>\r\n              <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n                <CButton  color=\"info\" style={{ marginLeft: '10px' }}>?</CButton>\r\n              </OverlayTrigger>\r\n            </CCol>\r\n          </CRow>\r\n          {options.map((option, index) => (\r\n            <CRow className=\"mb-3\" key={index}>\r\n              <CCol sm=\"2\">\r\n                <label htmlFor={`option-text-${index}`}>Đáp án {index + 1}:</label>\r\n              </CCol>\r\n              <CCol sm=\"6\">\r\n                <CFormInput\r\n                  id={`option-text-${index}`}\r\n                  type=\"text\"\r\n                  name=\"text\"\r\n                  value={option.text}\r\n                  onChange={(e) => handleOptionChange(index, e)}\r\n                />\r\n              </CCol>\r\n              <CCol sm=\"2\" className=\"align-self-center\">\r\n                <CFormCheck\r\n                  id={`option-correct-${index}`}\r\n                  label=\"Đúng\"\r\n                  name=\"isCorrect\"\r\n                  checked={option.isCorrect}\r\n                  onChange={(e) => handleOptionChange(index, e)}\r\n                />\r\n              </CCol>\r\n              <CCol sm=\"2\" className=\"align-self-center\">\r\n                <CButton\r\n                  type=\"button\"\r\n                  color=\"danger\"\r\n                  onClick={() => handleDeleteOption(index)}\r\n                >\r\n                  Xóa\r\n                </CButton>\r\n              </CCol>\r\n            </CRow>\r\n          ))}\r\n          <CRow className=\"mb-3\">\r\n            <CCol sm=\"12\">\r\n              <CButton type=\"button\" color=\"primary\" onClick={handleAddOption}>\r\n                Thêm lựa chọn\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n          <CRow className=\"mb-3\">\r\n            <CCol sm=\"12\">\r\n              <CButton type=\"submit\" color=\"success\">\r\n                {questionId ? 'Cập nhật' : 'Lưu'}\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n        </CForm>\r\n      </CCardBody>\r\n    </CCard>\r\n  );\r\n};\r\n\r\nexport default AddQuestion;\r\n"],"names":["createQuestion","data","file","token","payload","description","imageUrl","options","answer","headers","Authorization","apiClient","post","deleteQuestion","questionId","delete","listQuestion","get","updateQuestion","async","id","put","getQuestionById","AddQuestion","useParams","text","setText","useState","setOptions","isCorrect","image","setImage","setToken","localStorage","getItem","showAlert","setShowAlert","alertMessage","setAlertMessage","useEffect","fetchQuestionData","timer","setTimeout","clearTimeout","question","msg","updatedOptions","map","option","index","_id","err","handleOptionChange","event","newOptions","idx","target","name","checked","value","popover","_jsxs","Popover","children","_jsx","Header","as","Body","CCard","CCardHeader","CCardBody","CForm","onSubmit","e","preventDefault","trim","some","formattedOptions","correctOptionIndex","findIndex","response","status","console","error","CAlert","color","startsWith","CRow","className","CCol","sm","htmlFor","CFormTextarea","onChange","rows","CButton","onClick","handlePasteInput","pastedText","prompt","regex","match","questionText","answersText","slice","length","answerRegex","parsedOptions","answerMatch","exec","push","OverlayTrigger","trigger","placement","overlay","style","marginLeft","CFormInput","type","CFormCheck","label","filter","_","handleDeleteOption","handleAddOption"],"sourceRoot":""}