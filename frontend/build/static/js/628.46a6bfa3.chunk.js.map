{"version":3,"file":"static/js/628.46a6bfa3.chunk.js","mappings":"qHAEA,MAAMA,E,SAAYC,EAAMC,OAAO,CAE7BC,QAAS,wBACTC,iBAAiB,IAEnBJ,EAAUK,aAAaC,SAASC,KAC7BD,GAAaA,IACbE,IACKA,EAAMF,UAAsC,MAA1BE,EAAMF,SAASG,QACnCC,IAEKC,QAAQC,OAAOJ,MAG1B,MAAME,EAAeA,KACnBG,aAAaC,WAAW,eACxBD,aAAaC,WAAW,YACxBD,aAAaC,WAAW,YACxBC,OAAOC,SAASC,KAAO,QAAQ,EAGjC,G,uFCrBO,MAAMC,EAAiBA,CAACC,EAAMC,EAAMC,KACvC,MAAMC,EAAU,CACZC,YAAaJ,EAAKI,YAClBC,SAAUL,EAAKK,SACfC,QAASN,EAAKM,QACdC,OAAQP,EAAKO,QAEXC,EAAU,CACZC,cAAc,UAADC,OAAYR,GACzB,eAAgB,oBAEpB,OAAOrB,EAAAA,EAAU8B,KAAK,iBAAkBR,EAAS,CAAEK,WAAU,EAIpDI,EAAiBA,CAACC,EAAYX,KACvC,MAAMM,EAAU,CACZC,cAAc,UAADC,OAAYR,IAE7B,OAAOrB,EAAAA,EAAUiC,OAAO,iBAADJ,OAAkBG,GAAc,CAAEL,WAAU,EAG1DO,EAAgBb,IACzB,MAAMM,EAAU,CACZC,cAAc,UAADC,OAAYR,IAE7B,OAAOrB,EAAAA,EAAUmC,IAAI,qBAAsB,CAAER,WAAU,EAG9CS,EAAiBC,MAAOlB,EAAMa,EAAYX,KACnD,MAAMC,EAAU,CACZgB,GAAKN,EACLT,YAAaJ,EAAKI,YAClBC,SAAUL,EAAKK,SACfC,QAASN,EAAKM,QACdC,OAAQP,EAAKO,QAEXC,EAAU,CACZC,cAAc,UAADC,OAAYR,GACzB,eAAgB,oBAEpB,OAAOrB,EAAAA,EAAUuC,IAAI,iBAADV,OAAkBG,GAAcV,EAAS,CAAEK,WAAU,EAIhEa,EAAkBH,MAAOL,EAAYX,KAC9C,MAAMM,EAAU,CACZC,cAAc,UAADC,OAAYR,IAE7B,OAAOrB,EAAAA,EAAUmC,IAAI,iBAADN,OAAkBG,GAAc,CAAEL,WAAU,C,0OChCvDc,GAAcC,EAAAA,EAAAA,aACzB,SAACC,EAA+CC,G,MAA7CC,EAAQF,EAAAE,SAAEC,EAAKH,EAAAG,MAAEC,EAASJ,EAAAI,UAAEC,EAAIL,EAAAK,KAAKC,GAAIC,EAAAA,EAAAA,IAAAP,EAA3C,yCACC,OACEQ,EAAAA,cAAK,OAAAC,EAAAA,EAAAA,IAAA,CAAAR,IAAKA,GAASK,GACjBE,EAAAA,cAAA,MACEJ,WAAWM,EAAAA,EAAAA,GACT,cAAYC,EAAA,GAEVA,EAAC,mBAAmBzB,OAAAiB,IAAUA,EAC9BQ,EAAC,cAAczB,OAAAmB,IAASA,EAE1BM,GAAAP,IAGDF,GAIT,IAGFJ,EAAYc,UAAY,CACtBT,MAAOU,IAAAA,MAAgB,CAAC,QAAS,SAAU,QAC3CX,SAAUW,IAAAA,KACVT,UAAWS,IAAAA,OACXR,KAAMQ,IAAAA,MAAgB,CAAC,KAAM,QAG/Bf,EAAYgB,YAAc,c,0BCzC1B,MAwHA,EAxHsBC,IAAgB,IAAf,MAAErC,GAAOqC,EAC9B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,OAClDG,EAAiBC,IAAsBJ,EAAAA,EAAAA,WAAS,IAChDK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,IACxCO,IAAoBP,EAAAA,EAAAA,UAAS,IAC9BQ,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACRC,GAAgB,GACf,IAEH,MAAMA,EAAiBnC,UACrB,IACE,MAAM/B,QAAiB4B,EAAAA,EAAAA,IAAab,GACpCuC,EAAatD,EAASa,KAAKsD,IAAId,UACjC,CAAE,MAAOnD,GACPkE,QAAQlE,MAAM,4BAA6BA,EAC7C,GAkCImE,EAAsBT,EAAcE,EACpCQ,EAAuBD,EAAsBP,EAC7CS,EAAmBlB,EAAUmB,MAAMF,EAAsBD,GAE/D,OACEI,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAAnC,SAAA,EACFoC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAArC,UACJkC,EAAAA,EAAAA,MAACI,EAAAA,EAAK,CAAAtC,SAAA,EACJoC,EAAAA,EAAAA,KAACG,EAAAA,EAAW,CAAAvC,SAAC,kCACboC,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAAAxC,UACRoC,EAAAA,EAAAA,KAAA,OAAKlC,UAAU,YAAYuC,MAAO,CAAEC,QAAS,aAAc1C,SACxDgC,EAAiBW,KAAI,CAACC,EAAUC,KAC/BX,EAAAA,EAAAA,MAAA,OAAwBO,MAAO,CAAEK,aAAc,QAAU5C,UAAU,MAAKF,SAAA,EACtEkC,EAAAA,EAAAA,MAAA,OAAKhC,UAAU,kBAAiBF,SAAA,EAC9BkC,EAAAA,EAAAA,MAAA,MACEO,MAAO,CAAEM,OAAQ,WACjBC,QAASA,IA7BAJ,KAC3BpB,EAAS,uBAAuBoB,EAASK,IAAK,CAAEC,MAAO,CAAEN,aAAa,EA4BrCO,CAAoBP,GAAU5C,SAAA,CAC9C,UACM6C,EAAgB,EAAE,KAAGD,EAASlE,eAGpCkE,EAAShE,QAAQ+D,KAAI,CAACS,EAAQC,KAC7BnB,SAAAA,EAAAA,MAAA,OAAsBO,MAAO,CAAEa,WAAY,OAAOR,aAAa,QAAS9C,SAAA,EACtEoC,EAAAA,EAAAA,KAACmB,EAAAA,EAAU,CACTC,KAAK,QACLC,KAAI,YAAAzE,OAAcoE,EAAOH,KACzBS,QAASd,EAAS/D,OAAOoE,MAAQG,EAAOH,IACxCU,UAAQ,KAEVzB,EAAAA,EAAAA,MAAA,QAAMO,MAAO,CAAEa,WAAY,QAAStD,SAAA,EAlCjC4D,EAkCmDP,EAjC1D,CAAC,IAAK,IAAK,IAAK,KACjBO,IAAU,IAgC8D,KAAGR,EAAOS,UAPrET,EAAOH,KA3BZW,KAoCN,QAEHxB,EAAAA,EAAAA,KAAA,OAAKlC,UAAU,iBAAgBF,UAC7BoC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAO,CAACC,MAAM,SAASf,QAASA,IApD1BJ,KACvB1B,EAAoB0B,GACpBxB,GAAmB,EAAK,EAkD+B4C,CAAgBpB,GAAWH,MAAO,CAAEa,WAAY,QAAStD,SAAC,eAtB3F4C,EAASK,iBAiC7Bf,EAAAA,EAAAA,MAAC+B,EAAAA,EAAM,CAACC,QAAS/C,EAAiBgD,UAAWA,IAAM/C,GAAmB,GAAOpB,SAAA,EAC3EoC,EAAAA,EAAAA,KAACgC,EAAAA,EAAY,CAACC,aAAW,EAAArE,SAAC,6BAC1BoC,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAAtE,SAAC,0FACZkC,EAAAA,EAAAA,MAACqC,EAAAA,EAAY,CAAAvE,SAAA,EACXoC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAO,CAACC,MAAM,YAAYf,QAASA,IAAM5B,GAAmB,GAAOpB,SAAC,cAGrEoC,EAAAA,EAAAA,KAAC0B,EAAAA,EAAO,CAACC,MAAM,SAASf,QAnFXxD,UACnB,IACMyB,IACFY,QAAQ2C,IAAIvD,SACN/B,EAAAA,EAAAA,IAAe+B,EAAiBgC,IAAKzE,GAC3CuC,EAAaD,EAAU2D,QAAOC,GAAKA,EAAEzB,MAAQhC,EAAiBgC,OAC9D7B,GAAmB,GAEvB,CAAE,MAAOzD,GACPkE,QAAQlE,MAAM,2BAA4BA,EAC5C,GAyEoDqC,SAAC,kBAOnDoC,EAAAA,EAAAA,KAACxC,EAAW,CACV+E,WAAYtD,EACZuD,MAAOC,KAAKC,KAAKhE,EAAUiE,OAASxD,GACpCyD,aAvEoBC,IACxB3D,EAAe2D,EAAQ,MAwEhB,C,4FCzGE1C,GAA0E1C,EAAAA,EAAAA,aAGrF,SAACC,EAAyDC,GAAvD,IAAAC,EAAQF,EAAAE,SAAES,EAAqBX,EAAAoF,GAAjBC,OAAY,IAAA1E,EAAA,MAAKA,EAAEP,EAASJ,EAAAI,UAAKE,GAAIC,EAAAA,EAAAA,IAAAP,EAArD,+BACD,OACEQ,EAAAA,cAAC6E,GAAS5E,EAAAA,EAAAA,IAAA,CAACL,WAAWM,EAAAA,EAAAA,GAAW,cAAeN,IAAgBE,EAAI,CAAEL,IAAKA,IACxEC,EAGP,IAEAuC,EAAY7B,UAAY,CACtBwE,GAAIvE,IAAAA,YACJX,SAAUW,IAAAA,KACVT,UAAWS,IAAAA,QAGb4B,EAAY3B,YAAc,a,4HCkDb2C,GAAa1D,EAAAA,EAAAA,aACxB,SACEC,EAmBAC,GAlBE,IAAAG,EAASJ,EAAAI,UACTkF,EAAMtF,EAAAsF,OACNC,EAAQvF,EAAAuF,SACRC,EAAexF,EAAAwF,gBACfC,EAAazF,EAAAyF,cACbC,EAAa1F,EAAA0F,cACbC,EAAe3F,EAAA2F,gBACfC,EAAO5F,EAAA4F,QACPjG,EAAEK,EAAAL,GACFkG,EAAa7F,EAAA6F,cACbC,EAAM9F,EAAA8F,OACNC,EAAO/F,EAAA+F,QACPC,EAAKhG,EAAAgG,MACLC,EAAOjG,EAAAiG,QACPtF,EAAAX,EAAA0D,KAAAA,OAAO,IAAA/C,EAAA,WAAUA,EACjBuF,EAAKlG,EAAAkG,MACF5F,GAjBLC,EAAAA,EAAAA,IAAAP,EAAA,0LAqBMmG,GAAWC,EAAAA,EAAAA,QAAyB,MACpCC,GAAYC,EAAAA,EAAAA,IAAarG,EAAKkG,IAEpCvE,EAAAA,EAAAA,YAAU,WACJuE,EAASI,SAAWV,IACtBM,EAASI,QAAQV,cAAgBA,E,GAElC,CAACA,EAAeM,EAASI,UAE5B,IAAMC,EAAc,WAAM,OACxBhG,EAAAA,cACE,SAAAC,EAAAA,EAAAA,IAAA,CAAAiD,KAAMA,EACNtD,WAAWM,EAAAA,EAAAA,GAAW4E,EAAS,YAAc,mBAAoB,CAC/D,aAAcS,EACd,WAAYG,EACZ,OAAQN,IAEVjG,GAAIA,GACAW,EAAI,CACRL,IAAKoG,IAER,EAEKI,EAAiB,WAAM,OAC3BjG,EAAAA,cAACkG,EAAAA,EAAsB,CACrBC,YAAarG,EAAK,oBAClBiF,SAAUA,EACVC,gBAAiBA,EACjBC,cAAeA,EACfC,cAAeA,EACfK,QAASA,EACTJ,gBAAiBA,EACjBO,MAAOA,GATkB,EAavBU,EAAY,W,MAAM,OACtBpG,EAAAA,cAACqG,EAAAA,GAAUpG,EAAAA,EAAAA,IAAA,CACTqG,iBAAiBpG,EAAAA,EAAAA,GACf4E,GACI5E,EAAAA,EAAAA,GACE,MACA4E,EAAOyB,QAAU,OAAO7H,OAAAoG,EAAOyB,QAAW,KAAA7H,OAAAoG,EAAOrB,OAAU,OAAO/E,OAAAoG,EAAOrB,QAAOjE,EAAA,GAE9EA,EAAC,OAAAd,OAAOoG,EAAOjF,OAASiF,EAAOjF,KAEjCL,GAAA,GAAAd,OAAGoG,EAAO0B,QAEZ,qBAEDrH,GAAM,CAAEsH,QAAStH,IAErBqG,EAhBmB,EAkExB,OAAOxF,EAAAA,eA9CW,WAChB,OAAI8E,EAEA9E,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACgG,EAAc,MACdR,GAASxF,EAAAA,cAACoG,EAAY,MACvBpG,EAAAA,cAACiG,EAAc,OAKjBT,EACKJ,EACLpF,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACgG,EAAc,MACfhG,EAAAA,cAACqG,EAAAA,GAAUpG,EAAAA,EAAAA,IAAA,CACTqG,iBAAiBpG,EAAAA,EAAAA,GAAW,kCAAmCN,IAC1DT,GAAM,CAAEsH,QAAStH,IAErBqG,GAEHxF,EAAAA,cAACiG,EAAc,OAGjBjG,EAAAA,cAAA,OACEJ,WAAWM,EAAAA,EAAAA,GACT,aACA,CACE,oBAAqBoF,EACrB,qBAAsBG,EACtB,aAAcF,EACd,WAAYG,GAEd9F,IAGFI,EAAAA,cAACgG,EAAc,MACfhG,EAAAA,cAACoG,EAAY,MACbpG,EAAAA,cAACiG,EAAc,OAKdjG,EAAAA,cAACgG,EAAW,KACrB,GAEiB,KACnB,IAGF/C,EAAW7C,WAASH,EAAAA,EAAAA,IAAA,CAClB6E,OAAQzE,IAAAA,OACRT,UAAWS,IAAAA,OACX+E,QAAS/E,IAAAA,MAAgB,CAAC,SAC1BlB,GAAIkB,IAAAA,OACJgF,cAAehF,IAAAA,KACfiF,OAAQjF,IAAAA,KACRmF,MAAOnF,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,OAC9CoF,QAASpF,IAAAA,KACT6C,KAAM7C,IAAAA,MAAgB,CAAC,WAAY,WAChC6F,EAAAA,EAAuB9F,WAG5B6C,EAAW3C,YAAc,Y,4FCpMZoG,GACXnH,EAAAA,EAAAA,aACE,SAACC,EAAkFC,G,MAAhFC,EAAQF,EAAAE,SAAEiH,EAAqBnH,EAAAoF,GAAjBC,OAAY,IAAA8B,EAAA,MAAKA,EAAE/G,EAASJ,EAAAI,UAAE2F,EAAO/F,EAAA+F,QAAEqB,EAAOpH,EAAAoH,QAAElB,EAAKlG,EAAAkG,MAAK5F,GAA1EC,EAAAA,EAAAA,IAAAP,EAAA,2DACC,OACEQ,EAAAA,cAAC6E,GACC5E,EAAAA,EAAAA,IAAA,CAAAL,WAAWM,EAAAA,EAAAA,IAAUC,EAAA,GAEjBA,EAAC,WAAWzB,OAAAkI,EAAU,UAAY,aAAerB,EACjDpF,EAAC,SAASzB,OAAAkI,EAAU,UAAY,aAAelB,EAAK,GAEtD9F,IAEEE,EACJ,CAAAL,IAAKA,IAEJC,EAGP,IAGJgH,EAActG,UAAY,CACxBwE,GAAIvE,IAAAA,YACJX,SAAUW,IAAAA,KACVT,UAAWS,IAAAA,OACXkF,QAASlF,IAAAA,KACTuG,QAASvG,IAAAA,KACTqF,MAAOrF,IAAAA,MAGTqG,EAAcpG,YAAc,gBCVrB,IAAM4F,EAA0D,SAAC1G,GACtE,IAAA2G,EAAW3G,EAAA2G,YACXpB,EAAQvF,EAAAuF,SACRC,EAAexF,EAAAwF,gBACfC,EAAazF,EAAAyF,cACbM,EAAO/F,EAAA+F,QACPJ,EAAe3F,EAAA2F,gBACfO,EAAKlG,EAAAkG,MAEL,OACE1F,EAAAA,cAAAA,EAAAA,SAAA,KACG+E,IAAaW,GAASH,IACrBvF,EAAAA,cAAC0G,GACKzG,EAAAA,EAAAA,IAAC,CAAD,EAACsF,GAAW,CAAEpG,GAAIgH,GACtB,CAAAZ,QAASA,EACTqB,QAASzB,EACTO,MAAOA,IAENX,GAGJC,GACChF,EAAAA,cAAC0G,EAAa,CAACvH,GAAIgH,EAAaZ,SAAO,EAACqB,QAASzB,GAC9CH,GAGJC,GACCjF,EAAAA,cAAC0G,EAAa,CAAChB,OAAM,EAAAkB,QAASzB,GAC3BF,GAKX,EAEAiB,EAAuB9F,UAAY,CACjC+F,YAAa9F,IAAAA,OACb0E,SAAU1E,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SAC/C4E,cAAe5E,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SACpD2E,gBAAiB3E,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SACtDkF,QAASlF,IAAAA,KACT8E,gBAAiB9E,IAAAA,KACjBqF,MAAOrF,IAAAA,MAGT6F,EAAuB5F,YAAc,wB,4FChFxB+F,GAAa9G,EAAAA,EAAAA,aACxB,SAACC,EAAmDC,GAAjD,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAE0G,EAAe9G,EAAA8G,gBAAKxG,GAA3CC,EAAAA,EAAAA,IAAAP,EAAA,4CACC,OACEQ,EAAAA,cAAO,SAAAC,EAAAA,EAAAA,IAAA,CAAAL,UAAW,OAAA0G,QAAA,IAAAA,EAAAA,GAAmBpG,EAAAA,EAAAA,GAAW,aAAcN,IAAgBE,EAAM,CAAAL,IAAKA,IACtFC,EAGP,IAGF2G,EAAWjG,UAAY,CACrBV,SAAUW,IAAAA,KACVT,UAAWS,IAAAA,OACXiG,gBAAiBjG,IAAAA,QAGnBgG,EAAW/F,YAAc,Y,4FCpBZ2D,GAAe1E,EAAAA,EAAAA,aAC1B,SAACC,EAAkCC,GAAhC,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAKE,GAA1BC,EAAAA,EAAAA,IAAAP,EAAA,0BACC,OACEQ,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKL,WAAWM,EAAAA,EAAAA,GAAW,eAAgBN,IAAgBE,EAAI,CAAEL,IAAKA,IACnEC,EAGP,IAGFuE,EAAa7D,UAAY,CACvBV,SAAUW,IAAAA,KACVT,UAAWS,IAAAA,QAGb4D,EAAa3D,YAAc,c,iHCRdwD,GAAevE,EAAAA,EAAAA,aAC1B,SAACC,EAAsDC,GAApD,IAAAC,EAAQF,EAAAE,SAAEE,EAASJ,EAAAI,UAAEO,EAAkBX,EAAAuE,YAAlBA,OAAW,IAAA5D,GAAOA,EAAKL,GAAIC,EAAAA,EAAAA,IAAAP,EAAlD,wCACSqH,GAAeC,EAAAA,EAAAA,YAAWC,EAAAA,GAAcF,WAEhD,OACE7G,EAAAA,cAAA,OAAAC,EAAAA,EAAAA,IAAA,CAAKL,WAAWM,EAAAA,EAAAA,GAAW,eAAgBN,IAAgBE,EAAM,CAAAL,IAAKA,IACnEC,EACAqE,GAAe/D,EAAAA,cAACgH,EAAAA,EAAa,CAAAtE,QAAS,WAAM,OAAAmE,GAAW,EAAM,IAGpE,IAGF/C,EAAa1D,UAAY,CACvBV,SAAUW,IAAAA,KACVT,UAAWS,IAAAA,OACX0D,YAAa1D,IAAAA,MAGfyD,EAAaxD,YAAc,c","sources":["api/ApiClient.js","api/QuestionApi.js","../node_modules/@coreui/react/src/components/pagination/CPagination.tsx","views/admin/ListQuestion.js","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/modal/CModalFooter.tsx","../node_modules/@coreui/react/src/components/modal/CModalHeader.tsx"],"sourcesContent":["import axios from \"axios\";\n\nconst apiClient = axios.create({\n  // baseURL: \"https://api.blndt-sec-bav.com/\",\n  baseURL: \"http://localhost:5000\",\n  withCredentials: true,\n});\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      handleLogout();\n    }\n    return Promise.reject(error);\n  }\n);\nconst handleLogout = () => {\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"userInfo\");\n  localStorage.removeItem(\"timeLeft\");\n  window.location.href = \"/login\";\n};\n\nexport default apiClient;\n","import  apiClient  from './ApiClient';\n\nexport const createQuestion = (data, file, token) => {\n    const payload = {\n        description: data.description,\n        imageUrl: data.imageUrl,\n        options: data.options,\n        answer: data.answer,\n    };\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n    return apiClient.post(`/api/question/`, payload, { headers });\n};\n\n\nexport const deleteQuestion = (questionId, token) => {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n    };\n    return apiClient.delete(`/api/question/${questionId}`, { headers });\n};\n\nexport const listQuestion = (token) => {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n    };\n    return apiClient.get(`/api/question/list`, { headers });\n};\n\nexport const updateQuestion = async (data, questionId, token) => {\n    const payload = {\n        id : questionId,\n        description: data.description,\n        imageUrl: data.imageUrl, // or `file.path` if you're handling file uploads separately\n        options: data.options,\n        answer: data.answer,\n    };\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n    return apiClient.put(`/api/question/${questionId}`, payload, { headers });\n};\n\n\nexport const getQuestionById = async (questionId, token) => {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n    };\n    return apiClient.get(`/api/question/${questionId}`, { headers });\n};","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CPaginationProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * Set the alignment of pagination components.\n   */\n  align?: 'start' | 'center' | 'end'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CPagination = forwardRef<HTMLUListElement, CPaginationProps>(\n  ({ children, align, className, size, ...rest }, ref) => {\n    return (\n      <nav ref={ref} {...rest}>\n        <ul\n          className={classNames(\n            'pagination',\n            {\n              [`justify-content-${align}`]: align,\n              [`pagination-${size}`]: size,\n            },\n            className,\n          )}\n        >\n          {children}\n        </ul>\n      </nav>\n    )\n  },\n)\n\nCPagination.propTypes = {\n  align: PropTypes.oneOf(['start', 'center', 'end']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCPagination.displayName = 'CPagination'\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CButton, CModal, CModalHeader, CModalBody, CModalFooter, CPagination ,CFormCheck} from '@coreui/react';\nimport { listQuestion, deleteQuestion } from '../../api/QuestionApi';\nimport { left } from '@popperjs/core';\n\nconst QuestionsList = ({ token }) => {\n  const [questions, setQuestions] = useState([]);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [questionsPerPage] = useState(10);\n  const navigate = useNavigate(); // Use useNavigate instead of useHistory\n\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n\n  const fetchQuestions = async () => {\n    try {\n      const response = await listQuestion(token);\n      setQuestions(response.data.msg.questions);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      if (selectedQuestion) {\n        console.log(selectedQuestion)\n        await deleteQuestion(selectedQuestion._id, token);\n        setQuestions(questions.filter(q => q._id !== selectedQuestion._id));\n        setShowDeleteModal(false);\n      }\n    } catch (error) {\n      console.error('Error deleting question:', error);\n    }\n  };\n\n  const openDeleteModal = (question) => {\n    setSelectedQuestion(question);\n    setShowDeleteModal(true);\n  };\n\n  const handleQuestionClick = (question) => {\n    navigate('/admin/add-question/'+question._id, { state: { question } }); \n  };\n\n  const handlePageChange = (newPage) => {\n    setCurrentPage(newPage);\n  };\n\n  const getOptionLetter = (index) => {\n    const letters = ['A', 'B', 'C', 'D'];\n    return letters[index] || '';\n  };\n\n  const indexOfLastQuestion = currentPage * questionsPerPage;\n  const indexOfFirstQuestion = indexOfLastQuestion - questionsPerPage;\n  const currentQuestions = questions.slice(indexOfFirstQuestion, indexOfLastQuestion);\n\n  return (\n    <CRow>\n       <CCol>\n        <CCard>\n          <CCardHeader>Danh sách câu hỏi</CCardHeader>\n          <CCardBody>\n            <div className='container' style={{ padding: \"20px 30px\" }}>\n              {currentQuestions.map((question, questionIndex) => (\n                <div key={question._id} style={{ marginBottom: '20px' }} className='row'>\n                  <div className=\"col-md-8 col-10\">\n                    <h5\n                      style={{ cursor: 'pointer'}}\n                      onClick={() => handleQuestionClick(question)}\n                    >\n                      Câu {questionIndex + 1}: {question.description}\n                    </h5>\n\n                    {question.options.map((option, optionIndex) => (\n                      <div key={option._id} style={{ marginLeft: \"20px\",marginBottom:\"10px\" }}>\n                        <CFormCheck\n                          type=\"radio\"\n                          name={`question-${option._id}`}\n                          checked={question.answer._id === option._id}\n                          readOnly\n                        />\n                        <span style={{ marginLeft: \"10px\" }}>{getOptionLetter(optionIndex)}. {option.text}</span>\n                      </div>\n                    ))}\n                  </div>\n                  <div className='col-md-4 col-2'>\n                    <CButton color=\"danger\" onClick={() => openDeleteModal(question)} style={{ marginLeft: '10px' }}>\n                      Xóa\n                    </CButton>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      {/* Delete Confirmation Modal */}\n      <CModal visible={showDeleteModal} onDismiss={() => setShowDeleteModal(false)}>\n        <CModalHeader closeButton>Xác nhận xóa</CModalHeader>\n        <CModalBody>Bạn có chắc chắn muốn xóa câu hỏi này không?</CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => setShowDeleteModal(false)}>\n            Hủy\n          </CButton>\n          <CButton color=\"danger\" onClick={handleDelete}>\n            Xóa\n          </CButton>\n        </CModalFooter>\n      </CModal>\n\n      {/* Pagination */}\n      <CPagination\n        activePage={currentPage}\n        pages={Math.ceil(questions.length / questionsPerPage)}\n        onPageChange={handlePageChange} // Corrected handler\n      />\n    </CRow>\n  );\n};\n\nexport default QuestionsList;\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CModalFooterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CModalFooter = forwardRef<HTMLDivElement, CModalFooterProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('modal-footer', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCModalFooter.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCModalFooter.displayName = 'CModalFooter'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModal'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n"],"names":["apiClient","axios","create","baseURL","withCredentials","interceptors","response","use","error","status","handleLogout","Promise","reject","localStorage","removeItem","window","location","href","createQuestion","data","file","token","payload","description","imageUrl","options","answer","headers","Authorization","concat","post","deleteQuestion","questionId","delete","listQuestion","get","updateQuestion","async","id","put","getQuestionById","CPagination","forwardRef","_a","ref","children","align","className","size","rest","__rest","React","__assign","classNames","_b","propTypes","PropTypes","displayName","_ref","questions","setQuestions","useState","selectedQuestion","setSelectedQuestion","showDeleteModal","setShowDeleteModal","currentPage","setCurrentPage","questionsPerPage","navigate","useNavigate","useEffect","fetchQuestions","msg","console","indexOfLastQuestion","indexOfFirstQuestion","currentQuestions","slice","_jsxs","CRow","_jsx","CCol","CCard","CCardHeader","CCardBody","style","padding","map","question","questionIndex","marginBottom","cursor","onClick","_id","state","handleQuestionClick","option","optionIndex","marginLeft","CFormCheck","type","name","checked","readOnly","index","text","CButton","color","openDeleteModal","CModal","visible","onDismiss","CModalHeader","closeButton","CModalBody","CModalFooter","log","filter","q","activePage","pages","Math","ceil","length","onPageChange","newPage","as","Component","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","invalid","label","reverse","valid","inputRef","useRef","forkedRef","useForkedRef","current","FormControl","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","shape","htmlFor","CFormFeedback","_c","tooltip","setVisible","useContext","CModalContext","CCloseButton"],"sourceRoot":""}