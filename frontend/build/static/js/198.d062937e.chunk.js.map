{"version":3,"file":"static/js/198.d062937e.chunk.js","mappings":"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","sources":["api/QuestionApi.js","views/admin/AddQuestion.js"],"sourcesContent":["import  apiClient  from './ApiClient';\r\n\r\n// export const createQuestion = (data, file, token) => {\r\n//     const payload = {\r\n//         description: data.description,\r\n//         imageUrl: data.imageUrl,\r\n//         options: data.options,\r\n//         answer: data.answer,\r\n//     };\r\n//     const headers = {\r\n//         Authorization: `Bearer ${token}`,\r\n//         'Content-Type': 'application/json',\r\n//     };\r\n//     return apiClient.post(`/api/question/`, payload, { headers });\r\n// };\r\n\r\nexport const createQuestion = async (formData, token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n    };\r\n    return apiClient.post(`/api/question/create`, formData, { headers });\r\n};\r\n  \r\n\r\n\r\nexport const deleteQuestion = (questionId, token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n    };\r\n    return apiClient.delete(`/api/question/${questionId}`, { headers });\r\n};\r\n\r\nexport const listQuestion = (token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n    };\r\n    return apiClient.get(`/api/question/list`, { headers });\r\n};\r\n\r\nexport const updateQuestion = async (formData, questionId, token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`\r\n    };\r\n    return apiClient.put(`/api/question/${questionId}`, formData, { headers });\r\n};\r\n\r\n\r\nexport const getQuestionById = async (questionId, token) => {\r\n    const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n    };\r\n    return apiClient.get(`/api/question/${questionId}`, { headers });\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CForm,\r\n  CFormInput,\r\n  CFormCheck,\r\n  CRow,\r\n  CCol,\r\n  CFormTextarea,\r\n  CAlert,\r\n  CImage\r\n} from '@coreui/react';\r\nimport { createQuestion, getQuestionById, updateQuestion } from '../../api/QuestionApi';\r\nimport { Button, Popover, OverlayTrigger } from 'react-bootstrap';\r\n\r\nconst AddQuestion = () => {\r\n  const { questionId } = useParams();\r\n  \r\n  const [text, setText] = useState('');\r\n  const [options, setOptions] = useState([\r\n    { text: '', isCorrect: false, image: null },\r\n    { text: '', isCorrect: false, image: null },\r\n    { text: '', isCorrect: false, image: null },\r\n    { text: '', isCorrect: false, image: null },\r\n  ]);\r\n  const [questionImage, setQuestionImage] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('accessToken'));\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (questionId) {\r\n      fetchQuestionData(questionId);\r\n    }\r\n  }, [questionId]);\r\n\r\n  useEffect(() => {\r\n    if (showAlert) {\r\n      const timer = setTimeout(() => {\r\n        setShowAlert(false);\r\n      }, 5000);\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [showAlert]);\r\n\r\n  const fetchQuestionData = async (id) => {\r\n    try {\r\n      const response = await getQuestionById(id, token);\r\n      const question = response.data.msg.question;\r\n      setText(question.description);\r\n      setQuestionImage(question.imageUrl || null);\r\n\r\n      const updatedOptions = (question.options || [\r\n        { text: '', isCorrect: false, image: null },\r\n        { text: '', isCorrect: false, image: null },\r\n        { text: '', isCorrect: false, image: null },\r\n        { text: '', isCorrect: false, image: null },\r\n      ]).map((option, index) => ({\r\n        ...option,\r\n        isCorrect: option._id === question.answer._id,\r\n        image: option.imageUrl || null\r\n      }));\r\n  \r\n      setOptions(updatedOptions);\r\n    } catch (err) {\r\n      setAlertMessage('Lỗi khi tải thông tin câu hỏi');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n\r\n  const handleAddOption = () => {\r\n    setOptions([...options, { text: '', isCorrect: false, image: null }]);\r\n  };\r\n\r\n  const handleOptionChange = (index, event) => {\r\n    const newOptions = options.map((option, idx) =>\r\n      idx === index ? { ...option, [event.target.name]: event.target.name === 'isCorrect' ? event.target.checked : event.target.value } : option\r\n    );\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  const validateForm = () => {\r\n    if (!text.trim()) {\r\n      setAlertMessage('Đề bài không được để trống.');\r\n      return false;\r\n    }\r\n    if (options.some(option => !option.text.trim())) {\r\n      setAlertMessage('Tất cả các lựa chọn phải có nội dung.');\r\n      return false;\r\n    }\r\n    if (!options.some(option => option.isCorrect)) {\r\n      setAlertMessage('Phải chọn ít nhất một đáp án đúng.');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleDeleteOption = (index) => {\r\n    setOptions(options.filter((_, idx) => idx !== index));\r\n  };\r\n\r\n  const handleImageChange = (e, index = -1) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        if (index === -1) {\r\n          setQuestionImage(reader.result);\r\n        } else {\r\n          const newOptions = [...options];\r\n          newOptions[index].image = reader.result;\r\n          setOptions(newOptions);\r\n        }\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!validateForm()) {\r\n      setShowAlert(true);\r\n      return;\r\n    }\r\n  \r\n    const formData = new FormData();\r\n    formData.append('description', text);\r\n  \r\n    if (questionImage && questionImage.startsWith('data:')) {\r\n      formData.append('image', dataURItoBlob(questionImage), 'question_image.jpg');\r\n    }\r\n  \r\n    const optionsData = options.map(option => ({\r\n      text: option.text,\r\n      isCorrect: option.isCorrect\r\n    }));\r\n    formData.append('options', JSON.stringify(optionsData));\r\n  \r\n    const correctAnswerIndex = options.findIndex(option => option.isCorrect);\r\n    if (correctAnswerIndex !== -1) {\r\n      formData.append('answer', correctAnswerIndex.toString());\r\n    }\r\n  \r\n    options.forEach((option, index) => {\r\n      if (option.image && option.image.startsWith('data:')) {\r\n        formData.append(`options[${index}]`, dataURItoBlob(option.image), `option_${index}_image.jpg`);\r\n      }\r\n    });\r\n  \r\n    try {\r\n      let response;\r\n      if (questionId) {\r\n        formData.append('id', questionId);\r\n        response = await updateQuestion(formData, questionId, token);\r\n      } else {\r\n        response = await createQuestion(formData, token);\r\n      }\r\n  \r\n      if (response.status === 200) {\r\n        setAlertMessage(questionId ? 'Cập nhật câu hỏi thành công!' : 'Thêm câu hỏi mới thành công!');\r\n        if(questionId){\r\n          alert('Cập nhật câu hỏi thành công!')\r\n        }\r\n        {\r\n          setShowAlert(true);\r\n        }\r\n      } else {\r\n        setAlertMessage('Đầu vào không hợp lệ');\r\n        setShowAlert(true);\r\n      }\r\n  \r\n      if (!questionId) {\r\n        setText('');\r\n        setOptions([\r\n          { text: '', isCorrect: false, image: null },\r\n          { text: '', isCorrect: false, image: null },\r\n          { text: '', isCorrect: false, image: null },\r\n          { text: '', isCorrect: false, image: null },\r\n        ]);\r\n        setQuestionImage(null);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      setAlertMessage('Lỗi khi lưu câu hỏi');\r\n      setShowAlert(true);\r\n    }\r\n  };\r\n  \r\n  const handlePasteInput = () => {\r\n    const pastedText = prompt('Hãy dán nội dung câu hỏi:');\r\n    if (pastedText) {\r\n      const regex = /^(.*?)(?=(?:\\s*[A-D]\\.\\s*))/s;\r\n      const match = pastedText.match(regex);\r\n  \r\n      if (match) {\r\n        const questionText = match[1].trim();\r\n        const answersText = pastedText.slice(match[0].length).trim();\r\n  \r\n        const answerRegex = /\\s*[A-D]\\.\\s*([^A-D]*)/g;\r\n        const parsedOptions = [];\r\n        let answerMatch;\r\n  \r\n        while ((answerMatch = answerRegex.exec(answersText)) !== null) {\r\n          parsedOptions.push({\r\n            text: answerMatch[1].trim(),\r\n            isCorrect: false,\r\n            image: null\r\n          });\r\n        }\r\n  \r\n        setText(questionText);\r\n        setOptions(parsedOptions);\r\n      } else {\r\n        setAlertMessage('Nội dung dán vào không đúng định dạng.');\r\n        setShowAlert(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dataURItoBlob = (dataURI) => {\r\n    const byteString = atob(dataURI.split(',')[1]);\r\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n    const ab = new ArrayBuffer(byteString.length);\r\n    const ia = new Uint8Array(ab);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([ab], { type: mimeString });\r\n  };\r\n\r\n  const popover = (\r\n    <Popover id=\"popover-basic\">\r\n      <Popover.Header as=\"h3\">Hướng dẫn định dạng</Popover.Header>\r\n      <Popover.Body>\r\n        <p>Để paste câu hỏi, bạn cần định dạng như sau:</p>\r\n        <p>\r\n          Câu hỏi hoặc mô tả <br />\r\n          A. Đáp án 1 <br />\r\n          B. Đáp án 2 <br />\r\n          C. Đáp án 3 <br />\r\n          D. Đáp án 4\r\n        </p>\r\n        <p>Hoặc:</p>\r\n        <p>\r\n          Câu hỏi hoặc mô tả <br />\r\n          A. Đáp án 1 B. Đáp án 2 C. Đáp án 3 D. Đáp án 4\r\n        </p>\r\n      </Popover.Body>\r\n    </Popover>\r\n  );\r\n  \r\n  return (\r\n    <CCard>\r\n      <CCardHeader>\r\n        {questionId ? 'Chỉnh sửa câu hỏi' : 'Thêm câu hỏi'}\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CForm onSubmit={handleSubmit}>\r\n          {showAlert && (\r\n            <CAlert color={alertMessage.startsWith('Failed') || alertMessage.startsWith('An error') ? 'danger' : 'success'}>\r\n              {alertMessage}\r\n            </CAlert>\r\n          )}\r\n          <CRow className=\"mb-3\">\r\n            <CCol sm=\"2\">\r\n              <label htmlFor=\"question-text\">Đề bài:</label>\r\n            </CCol>\r\n            <CCol sm=\"6\">\r\n              <CFormTextarea\r\n                id=\"question-text\"\r\n                value={text}\r\n                onChange={(e) => setText(e.target.value)}\r\n                rows={4}\r\n              />\r\n              {questionImage && (\r\n                <div className=\"mt-3\">\r\n                  <CImage src={questionImage} alt=\"\" style={{ maxWidth: '100%', height: 'auto' }} />\r\n                </div>\r\n              )}\r\n            </CCol>\r\n            <CCol sm=\"3\">\r\n              <CButton color=\"primary\" onClick={handlePasteInput}>\r\n                Import nhanh\r\n              </CButton>\r\n              <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n                <CButton color=\"info\" style={{ marginLeft: '10px' }}>?</CButton>\r\n              </OverlayTrigger>\r\n              <CFormInput\r\n                className='mt-3'\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                placeholder='Thêm ảnh'\r\n                onChange={(e) => handleImageChange(e)}\r\n              />\r\n            </CCol>\r\n          </CRow>\r\n          {options.map((option, index) => (\r\n            <CRow className=\"mb-3\" key={index}>\r\n              <CCol sm=\"2\">\r\n                <label htmlFor={`option-text-${index}`}>Đáp án {index + 1}:</label>\r\n              </CCol>\r\n              <CCol sm=\"6\">\r\n                <CFormInput\r\n                  id={`option-text-${index}`}\r\n                  type=\"text\"\r\n                  name=\"text\"\r\n                  value={option.text}\r\n                  onChange={(e) => handleOptionChange(index, e)}\r\n                />\r\n                {option.image && (\r\n                  <div className=\"mt-2\">\r\n                    <CImage src={option.image} alt=\"\" style={{ maxWidth: '100%', height: 'auto' }} />\r\n                  </div>\r\n                )}\r\n              </CCol>\r\n              <CCol sm=\"2\" className=\"align-self-center\">\r\n                <CFormCheck\r\n                  id={`option-correct-${index}`}\r\n                  label=\"Đúng\"\r\n                  name=\"isCorrect\"\r\n                  checked={option.isCorrect}\r\n                  onChange={(e) => handleOptionChange(index, e)}\r\n                />\r\n                <CFormInput\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  placeholder='Thêm ảnh'\r\n                  onChange={(e) => handleImageChange(e, index)}\r\n                />\r\n              </CCol>\r\n              <CCol sm=\"2\" className=\"align-self-center\">\r\n                <CButton\r\n                  type=\"button\"\r\n                  color=\"danger\"\r\n                  onClick={() => handleDeleteOption(index)}\r\n                >\r\n                  Xóa\r\n                </CButton>\r\n              </CCol>\r\n            </CRow>\r\n          ))}\r\n          <CRow className=\"mb-3\">\r\n            <CCol sm=\"12\">\r\n              <CButton type=\"button\" color=\"primary\" onClick={handleAddOption}>\r\n                Thêm lựa chọn\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n          <CRow className=\"mb-3\">\r\n            <CCol sm=\"12\">\r\n              <CButton type=\"submit\" color=\"success\">\r\n                {questionId ? 'Cập nhật' : 'Lưu'}\r\n              </CButton>\r\n            </CCol>\r\n          </CRow>\r\n        </CForm>\r\n      </CCardBody>\r\n    </CCard>\r\n  );\r\n};\r\n\r\nexport default AddQuestion;"],"names":["createQuestion","async","formData","token","headers","Authorization","apiClient","post","deleteQuestion","questionId","delete","listQuestion","get","updateQuestion","put","getQuestionById","AddQuestion","useParams","text","setText","useState","options","setOptions","isCorrect","image","questionImage","setQuestionImage","setToken","localStorage","getItem","showAlert","setShowAlert","alertMessage","setAlertMessage","useEffect","fetchQuestionData","timer","setTimeout","clearTimeout","question","id","data","msg","description","imageUrl","updatedOptions","map","option","index","_id","answer","err","handleOptionChange","event","newOptions","idx","target","name","checked","value","handleImageChange","e","arguments","length","undefined","file","files","reader","FileReader","onloadend","result","readAsDataURL","dataURItoBlob","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","Blob","type","popover","_jsxs","Popover","children","_jsx","Header","as","Body","CCard","CCardHeader","CCardBody","CForm","onSubmit","preventDefault","trim","some","FormData","append","startsWith","optionsData","JSON","stringify","correctAnswerIndex","findIndex","toString","forEach","response","status","alert","console","error","CAlert","color","CRow","className","CCol","sm","htmlFor","CFormTextarea","onChange","rows","CImage","src","alt","style","maxWidth","height","CButton","onClick","handlePasteInput","pastedText","prompt","regex","match","questionText","answersText","slice","answerRegex","parsedOptions","answerMatch","exec","push","OverlayTrigger","trigger","placement","overlay","marginLeft","CFormInput","accept","placeholder","CFormCheck","label","filter","_","handleDeleteOption","handleAddOption"],"sourceRoot":""}