{"version":3,"file":"static/js/198.1e634b4f.chunk.js","mappings":"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","sources":["api/ApiClient.js","api/QuestionApi.js","views/admin/AddQuestion.js"],"sourcesContent":["import axios from \"axios\";\n\nconst apiClient = axios.create({\n  // baseURL: \"https://api.blndt-sec-bav.com/\",\n  baseURL: \"http://localhost:5000\",\n  withCredentials: true,\n});\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      handleLogout();\n    }\n    return Promise.reject(error);\n  }\n);\nconst handleLogout = () => {\n  localStorage.removeItem(\"accessToken\");\n  localStorage.removeItem(\"userInfo\");\n  localStorage.removeItem(\"timeLeft\");  \n  window.location.href = \"/login\";\n};\n\nexport default apiClient;\n","import  apiClient  from './ApiClient';\n\nexport const createQuestion = (data, file, token) => {\n    const payload = {\n        description: data.description,\n        imageUrl: data.imageUrl,\n        options: data.options,\n        answer: data.answer,\n    };\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n    return apiClient.post(`/api/question/`, payload, { headers });\n};\n\n\nexport const deleteQuestion = (questionId, token) => {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n    };\n    return apiClient.delete(`/api/question/${questionId}`, { headers });\n};\n\nexport const listQuestion = (token) => {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n    };\n    return apiClient.get(`/api/question/list`, { headers });\n};\n\nexport const updateQuestion = async (data, questionId, token) => {\n    const payload = {\n        id : questionId,\n        description: data.description,\n        imageUrl: data.imageUrl, // or `file.path` if you're handling file uploads separately\n        options: data.options,\n        answer: data.answer,\n    };\n    const headers = {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    };\n    return apiClient.put(`/api/question/${questionId}`, payload, { headers });\n};\n\n\nexport const getQuestionById = async (questionId, token) => {\n    const headers = {\n        Authorization: `Bearer ${token}`,\n    };\n    return apiClient.get(`/api/question/${questionId}`, { headers });\n};","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // Import useParams to get path variables\nimport axios from 'axios';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CForm,\n  CFormInput,\n  CFormCheck,\n  CRow,\n  CCol,\n  CFormTextarea,\n  CAlert\n} from '@coreui/react';\nimport { createQuestion, getQuestionById ,updateQuestion} from '../../api/QuestionApi'; // Import your API functions\nimport { Button, Popover, OverlayTrigger } from 'react-bootstrap';\n\nconst CLOUDINARY_URL = process.env.REACT_APP_CLOUDINARY_URL;\nconst CLOUDINARY_UPLOAD_PRESET = process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET;\n\nconst AddQuestion = () => {\n  const { questionId } = useParams();\n  \n  const [text, setText] = useState('');\n  const [options, setOptions] = useState([\n    { text: '', isCorrect: false },\n    { text: '', isCorrect: false },\n    { text: '', isCorrect: false },\n    { text: '', isCorrect: false },\n  ]);\n  const [image, setImage] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('accessToken'));\n  const [showAlert, setShowAlert] = useState(false); \n  const [alertMessage, setAlertMessage] = useState('');\n\n  useEffect(() => {\n    if (questionId) {\n      fetchQuestionData(questionId);\n    }\n  }, [questionId]);\n\n  useEffect(() => {\n    if (showAlert) {\n      const timer = setTimeout(() => {\n        setShowAlert(false);\n      }, 5000);\n\n      return () => clearTimeout(timer); \n    }\n  }, [showAlert]);\n  const fetchQuestionData = async (id) => {\n    try {\n      const response = await getQuestionById(id, token);\n      const question = response.data.msg.question;\n      setText(question.description);\n      setImage(question.imageUrl || null);\n\n      const updatedOptions = (question.options || [\n        { text: '', isCorrect: false },\n        { text: '', isCorrect: false },\n        { text: '', isCorrect: false },\n        { text: '', isCorrect: false },\n      ]).map((option, index) => ({\n        ...option,\n        isCorrect: option._id === question.answer._id\n      }));\n  \n      setOptions(updatedOptions);\n    } catch (err) {\n      setAlertMessage('Lỗi khi tải thông tin câu hỏi');\n      setShowAlert(true);\n    }\n  };\n\n  const handleAddOption = () => {\n    setOptions([...options, { text: '', isCorrect: false }]);\n  };\n\n  const handleOptionChange = (index, event) => {\n    const newOptions = options.map((option, idx) =>\n      idx === index ? { ...option, [event.target.name]: event.target.name === 'isCorrect' ? event.target.checked : event.target.value } : option\n    );\n    setOptions(newOptions);\n  };\n\n  const validateForm = () => {\n    if (!text.trim()) {\n      setAlertMessage('Đề bài không được để trống.');\n      return false;\n    }\n    if (options.some(option => !option.text.trim())) {\n      setAlertMessage('Tất cả các lựa chọn phải có nội dung.');\n      return false;\n    }\n    if (!options.some(option => option.isCorrect)) {\n      setAlertMessage('Phải chọn ít nhất một đáp án đúng.');\n      return false;\n    }\n    return true;\n  };\n\n  const handleDeleteOption = (index) => {\n    setOptions(options.filter((_, idx) => idx !== index));\n  };\n\n  const handleImageChange = async (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\n      \n      try {\n        const response = await axios.post(CLOUDINARY_URL, formData);\n        setImage(response.data.secure_url);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!validateForm()) {\n      setShowAlert(true);\n      return;\n    }\n    \n    // Chuyển đổi các tùy chọn thành định dạng mong muốn\n    const formattedOptions = options.map(option => ({\n      text: option.text,\n      isCorrect: option.isCorrect\n    }));\n    const correctOptionIndex = options.findIndex(option => option.isCorrect);\n  \n    const data = {\n      description: text,\n      imageUrl: image,\n      options: formattedOptions,\n      answer: correctOptionIndex\n    };\n  \n    try {\n      let response;\n      if (questionId) {\n        response = await updateQuestion(data, questionId,token);\n      } else {\n        response = await createQuestion(data, image, token);\n      }\n  \n      if (response.status === 200) {\n        setAlertMessage(questionId ? 'Cập nhật câu hỏi thành công!' : 'Thêm câu hỏi mới thành công!');\n        setShowAlert(true);\n      } else {\n        setAlertMessage('Đầu vào không hợp lệ');\n        setShowAlert(true);\n      }\n  \n      if(!questionId){\n        setText('');\n        setOptions([\n          { text: '', isCorrect: false },\n          { text: '', isCorrect: false },\n          { text: '', isCorrect: false },\n          { text: '', isCorrect: false },\n        ]);\n        setImage(null);\n        }\n    } catch (err) {\n      console.error(err);\n      setAlertMessage('Lỗi khi lưu câu hỏi');\n      setShowAlert(true);\n    }\n  };\n  \n  const handlePasteInput = () => {\n    const pastedText = prompt('Hãy dán nội dung câu hỏi:');\n    if (pastedText) {\n      const regex = /^(.*?)(?=(?:\\s*[A-D]\\.\\s*))/s;\n      const match = pastedText.match(regex);\n  \n      if (match) {\n        const questionText = match[1].trim();\n        const answersText = pastedText.slice(match[0].length).trim();\n  \n        const answerRegex = /\\s*[A-D]\\.\\s*([^A-D]*)/g;\n        const parsedOptions = [];\n        let answerMatch;\n  \n        while ((answerMatch = answerRegex.exec(answersText)) !== null) {\n          parsedOptions.push({\n            text: answerMatch[1].trim(),\n            isCorrect: false\n          });\n        }\n  \n        setText(questionText);\n        setOptions(parsedOptions);\n      } else {\n        setAlertMessage('Nội dung dán vào không đúng định dạng.');\n        setShowAlert(true);\n      }\n    }\n  };\n\n  const popover = (\n    <Popover id=\"popover-basic\">\n      <Popover.Header as=\"h3\">Hướng dẫn định dạng</Popover.Header>\n      <Popover.Body>\n        <p>Để paste câu hỏi, bạn cần định dạng như sau:</p>\n        <p>\n          Câu hỏi hoặc mô tả <br />\n          A. Đáp án 1 <br />\n          B. Đáp án 2 <br />\n          C. Đáp án 3 <br />\n          D. Đáp án 4\n        </p>\n        <p>Hoặc:</p>\n        <p>\n          Câu hỏi hoặc mô tả <br />\n          A. Đáp án 1 B. Đáp án 2 C. Đáp án 3 D. Đáp án 4\n        </p>\n      </Popover.Body>\n    </Popover>\n  );\n  \n  return (\n    <CCard>\n      <CCardHeader>\n        {questionId ? 'Chỉnh sửa câu hỏi' : 'Thêm câu hỏi'}\n      </CCardHeader>\n      <CCardBody>\n        <CForm onSubmit={handleSubmit}>\n          {showAlert && (\n            <CAlert color={alertMessage.startsWith('Failed') || alertMessage.startsWith('An error') ? 'danger' : 'success'}>\n              {alertMessage}\n            </CAlert>\n          )}\n          <CRow className=\"mb-3\">\n            <CCol sm=\"2\">\n              <label htmlFor=\"question-text\">Đề bài:</label>\n            </CCol>\n            <CCol sm=\"6\">\n              <CFormTextarea\n                id=\"question-text\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                rows={4}\n              />\n              {/* {image && (\n                <div className=\"mt-3\">\n                  <img src={image} alt=\"\" style={{ maxWidth: '100%', height: 'auto' }} />\n                </div>\n              )} */}\n            </CCol>\n            <CCol sm=\"2\">\n              {/* <CFormInput\n                type=\"file\"\n                accept=\"image/*\"\n                placeholder='Thêm ảnh'\n                onChange={handleImageChange}\n              /> */}\n              <CButton color=\"primary\" onClick={handlePasteInput}>\n                Import nhanh\n              </CButton>\n              <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n                <CButton  color=\"info\" style={{ marginLeft: '10px' }}>?</CButton>\n              </OverlayTrigger>\n            </CCol>\n          </CRow>\n          {options.map((option, index) => (\n            <CRow className=\"mb-3\" key={index}>\n              <CCol sm=\"2\">\n                <label htmlFor={`option-text-${index}`}>Đáp án {index + 1}:</label>\n              </CCol>\n              <CCol sm=\"6\">\n                <CFormInput\n                  id={`option-text-${index}`}\n                  type=\"text\"\n                  name=\"text\"\n                  value={option.text}\n                  onChange={(e) => handleOptionChange(index, e)}\n                />\n              </CCol>\n              <CCol sm=\"2\" className=\"align-self-center\">\n                <CFormCheck\n                  id={`option-correct-${index}`}\n                  label=\"Đúng\"\n                  name=\"isCorrect\"\n                  checked={option.isCorrect}\n                  onChange={(e) => handleOptionChange(index, e)}\n                />\n              </CCol>\n              <CCol sm=\"2\" className=\"align-self-center\">\n                <CButton\n                  type=\"button\"\n                  color=\"danger\"\n                  onClick={() => handleDeleteOption(index)}\n                >\n                  Xóa\n                </CButton>\n              </CCol>\n            </CRow>\n          ))}\n          <CRow className=\"mb-3\">\n            <CCol sm=\"12\">\n              <CButton type=\"button\" color=\"primary\" onClick={handleAddOption}>\n                Thêm lựa chọn\n              </CButton>\n            </CCol>\n          </CRow>\n          <CRow className=\"mb-3\">\n            <CCol sm=\"12\">\n              <CButton type=\"submit\" color=\"success\">\n                {questionId ? 'Cập nhật' : 'Lưu'}\n              </CButton>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CCardBody>\n    </CCard>\n  );\n};\n\nexport default AddQuestion;\n"],"names":["apiClient","axios","create","baseURL","withCredentials","interceptors","response","use","error","status","handleLogout","Promise","reject","localStorage","removeItem","window","location","href","createQuestion","data","file","token","payload","description","imageUrl","options","answer","headers","Authorization","concat","post","deleteQuestion","questionId","delete","listQuestion","get","updateQuestion","async","id","put","getQuestionById","AddQuestion","useParams","text","setText","useState","setOptions","isCorrect","image","setImage","setToken","getItem","showAlert","setShowAlert","alertMessage","setAlertMessage","useEffect","fetchQuestionData","timer","setTimeout","clearTimeout","question","msg","updatedOptions","map","option","index","_id","err","handleOptionChange","event","newOptions","idx","target","name","checked","value","popover","_jsxs","Popover","children","_jsx","Header","as","Body","CCard","CCardHeader","CCardBody","CForm","onSubmit","e","preventDefault","trim","some","formattedOptions","correctOptionIndex","findIndex","console","CAlert","color","startsWith","CRow","className","CCol","sm","htmlFor","CFormTextarea","onChange","rows","CButton","onClick","handlePasteInput","pastedText","prompt","regex","match","questionText","answersText","slice","length","answerRegex","parsedOptions","answerMatch","exec","push","OverlayTrigger","trigger","placement","overlay","style","marginLeft","CFormInput","type","CFormCheck","label","filter","_","handleDeleteOption","handleAddOption"],"sourceRoot":""}